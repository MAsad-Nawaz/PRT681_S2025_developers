@page "/movies/create"
@using Microsoft.EntityFrameworkCore
@using MovieTheater.Models
@inject IDbContextFactory<DataContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Movie</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Movie" OnValidSubmit="AddMovie" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <span class="text-danger">*</span>
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Movie.Name" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Movie.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="releasedate" class="form-label">ReleaseDate:</label> 
                <InputDate id="releasedate" @bind-Value="Movie.ReleaseDate" class="form-control" /> 
                <ValidationMessage For="() => Movie.ReleaseDate" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <span class="text-danger">*</span>
                <label for="director" class="form-label">Director:</label> 
                <InputText id="director" @bind-Value="Movie.Director" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Movie.Director" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="contactemail" class="form-label">ContactEmail:</label> 
                <InputText id="contactemail" @bind-Value="Movie.ContactEmail" class="form-control" /> 
                <ValidationMessage For="() => Movie.ContactEmail" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <span class="text-danger">*</span>
                <label for="language" class="form-label">Language:</label> 
                <select @bind="Movie.Language">
                    @foreach (var language in Enum.GetValues<Language>())
                    {
                        <option value="@language">@language</option>
                    }
                </select>
                <ValidationMessage For="() => Movie.Language" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="posterpath" class="form-label">PosterPath:</label> 
                <InputText id="posterpath" @bind-Value="Movie.PosterPath" class="form-control" /> 
                <ValidationMessage For="() => Movie.PosterPath" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/movies">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Movie Movie { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddMovie()
    {
        using var context = DbFactory.CreateDbContext();
        context.Movie.Add(Movie);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/movies");
    }
}