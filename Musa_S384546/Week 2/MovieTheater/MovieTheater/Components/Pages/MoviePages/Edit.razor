@page "/movies/edit"
@using Microsoft.EntityFrameworkCore
@using MovieTheater.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IDbContextFactory<DataContext> DbFactory
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment
@rendermode InteractiveServer

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Movie</h2>
<hr />
@if (Movie is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm Model="Movie" OnValidSubmit="UpdateMovie">
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <div class="mb-3">
                <span class="text-danger">*</span>
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Movie.Name" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Movie.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="releasedate" class="form-label">ReleaseDate:</label>
                    <InputDate id="releasedate" @bind-Value="Movie.ReleaseDate" class="form-control" />
                    <ValidationMessage For="() => Movie.ReleaseDate" class="text-danger" />
                </div>
                <div class="mb-3">
                <span class="text-danger">*</span>
                    <label for="director" class="form-label">Director:</label>
                    <InputText id="director" @bind-Value="Movie.Director" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Movie.Director" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="contactemail" class="form-label">ContactEmail:</label>
                    <InputText id="contactemail" @bind-Value="Movie.ContactEmail" class="form-control" />
                    <ValidationMessage For="() => Movie.ContactEmail" class="text-danger" />
                </div>
                <div class="mb-3">
                <span class="text-danger">*</span>
                    <label for="language" class="form-label">Language:</label>
                    <select @bind="Movie.Language" class="form-control">
                        @foreach (var language in Enum.GetValues<Language>())
                        {
                            <option value="@language">@language</option>
                        }
                    </select>
                    <ValidationMessage For="() => Movie.Language" class="text-danger" />
                </div>
                <div class="mb-3">
                <span class="text-danger">*</span>
                    <label for="category" class="form-label">Category:</label>
                    <InputSelect id="category" @bind-Value="Movie.CategoryId" class="form-control" aria-required="true">
                        <option value="">-- Select Category --</option>
                        @foreach (var category in Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Movie.CategoryId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="posterfile" class="form-label">Poster Image:</label>
                    @if (!string.IsNullOrEmpty(Movie.PosterPath))
                    {
                        <div class="mb-2">
                            <img src="@Movie.PosterPath" alt="Current poster" style="width: 100px; height: 150px; object-fit: cover;" />
                            <br />
                            <small class="text-muted">Current poster</small>
                        </div>
                    }
                    <InputFile id="posterfile" OnChange="HandleFileUpload" class="form-control" accept="image/*" />
                    @if (!string.IsNullOrEmpty(uploadMessage))
                    {
                        <div class="text-info mt-2">@uploadMessage</div>
                    }
                    <small class="text-muted">Leave empty to keep current poster</small>
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/movies">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    private Movie? Movie { get; set; }
    
    private List<Category> Categories { get; set; } = new();
    private string uploadMessage = string.Empty;
    private const long MaxFileSize = 5 * 1024 * 1024; // 5MB

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Movie ??= await context.Movie.FirstOrDefaultAsync(m => m.Id == Id);
        Categories = await context.Category.ToListAsync();

        if (Movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        uploadMessage = string.Empty;
        
        var file = e.File;
        if (file != null)
        {
            // Validate file size
            if (file.Size > MaxFileSize)
            {
                uploadMessage = "File size must be less than 5MB.";
                return;
            }

            // Validate file type
            var allowedTypes = new[] { "image/jpeg", "image/jpg", "image/png", "image/gif", "image/webp" };
            if (!allowedTypes.Contains(file.ContentType))
            {
                uploadMessage = "Only image files (JPEG, PNG, GIF, WebP) are allowed.";
                return;
            }

            try
            {
                // Create uploads directory if it doesn't exist
                var uploadsPath = Path.Combine(Environment.WebRootPath, "uploads", "movies");
                Directory.CreateDirectory(uploadsPath);

                // Generate unique filename
                var fileExtension = Path.GetExtension(file.Name);
                var fileName = $"{Guid.NewGuid()}{fileExtension}";
                var filePath = Path.Combine(uploadsPath, fileName);

                // Save file
                using var stream = new FileStream(filePath, FileMode.Create);
                await file.OpenReadStream(MaxFileSize).CopyToAsync(stream);

                // Delete old file if it exists
                if (!string.IsNullOrEmpty(Movie!.PosterPath))
                {
                    var oldFilePath = Path.Combine(Environment.WebRootPath, Movie.PosterPath.TrimStart('/'));
                    if (File.Exists(oldFilePath))
                    {
                        File.Delete(oldFilePath);
                    }
                }

                // Store relative path in movie object
                Movie!.PosterPath = $"/uploads/movies/{fileName}";
                uploadMessage = "File uploaded successfully!";
            }
            catch (Exception ex)
            {
                uploadMessage = $"Error uploading file: {ex.Message}";
            }
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateMovie()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Movie!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MovieExists(Movie!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/movies");
    }

    private bool MovieExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Movie.Any(e => e.Id == id);
    }
}
