@page "/movies/edit"
@using Microsoft.EntityFrameworkCore
@using MovieTheater.Models
@inject IDbContextFactory<DataContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Movie</h2>
<hr />
@if (Movie is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Movie" OnValidSubmit="UpdateMovie" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Movie.Id" value="@Movie.Id" />
                <div class="mb-3">
                <span class="text-danger">*</span>
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Movie.Name" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Movie.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="releasedate" class="form-label">ReleaseDate:</label>
                    <InputDate id="releasedate" @bind-Value="Movie.ReleaseDate" class="form-control" />
                    <ValidationMessage For="() => Movie.ReleaseDate" class="text-danger" />
                </div>
                <div class="mb-3">
                <span class="text-danger">*</span>
                    <label for="director" class="form-label">Director:</label>
                    <InputText id="director" @bind-Value="Movie.Director" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Movie.Director" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="contactemail" class="form-label">ContactEmail:</label>
                    <InputText id="contactemail" @bind-Value="Movie.ContactEmail" class="form-control" />
                    <ValidationMessage For="() => Movie.ContactEmail" class="text-danger" />
                </div>
                <div class="mb-3">
                <span class="text-danger">*</span>
                    <label for="language" class="form-label">Language:</label>
                    <select @bind="Movie.Language" class="form-control">
                        @foreach (var language in Enum.GetValues<Language>())
                        {
                            <option value="@language">@language</option>
                        }
                    </select>
                    <ValidationMessage For="() => Movie.Language" class="text-danger" />
                </div>
                <div class="mb-3">
                <span class="text-danger">*</span>
                    <label for="category" class="form-label">Category:</label>
                    <InputSelect id="category" @bind-Value="Movie.CategoryId" class="form-control" aria-required="true">
                        <option value="">-- Select Category --</option>
                        @foreach (var category in Categories)
                        {
                            <option value="@category.Id">@category.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Movie.CategoryId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="posterpath" class="form-label">PosterPath:</label>
                    <InputText id="posterpath" @bind-Value="Movie.PosterPath" class="form-control" />
                    <ValidationMessage For="() => Movie.PosterPath" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/movies">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Movie? Movie { get; set; }
    
    private List<Category> Categories { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Movie ??= await context.Movie.FirstOrDefaultAsync(m => m.Id == Id);
        Categories = await context.Category.ToListAsync();

        if (Movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateMovie()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Movie!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MovieExists(Movie!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/movies");
    }

    private bool MovieExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Movie.Any(e => e.Id == id);
    }
}
