@page "/movies/edit"
@using Microsoft.EntityFrameworkCore
@using MovieTheater.Models
@using Microsoft.AspNetCore.Components.Forms
@inject IDbContextFactory<DataContext> DbFactory
@inject NavigationManager NavigationManager
@inject IWebHostEnvironment Environment
@rendermode InteractiveServer

<PageTitle>Edit Movie - MovieTheater</PageTitle>

<!-- Page Header -->
<div class="container mx-auto px-4 py-8">
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
        <div>
            <h1 class="text-4xl font-bold text-base-content">Edit Movie</h1>
            <p class="text-base-content/70 mt-2">Update movie information</p>
        </div>
        <a href="/movies" class="btn btn-outline">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Movies
        </a>
    </div>

    @if (Movie is null)
    {
        <div class="flex justify-center items-center h-64">
            <span class="loading loading-spinner loading-lg"></span>
            <span class="ml-4 text-lg">Loading movie...</span>
        </div>
    }
    else
    {
        <!-- Form Card -->
        <div class="max-w-4xl mx-auto">
            <div class="card bg-base-100 shadow-xl">
                <div class="card-body">
                    <EditForm Model="Movie" OnValidSubmit="UpdateMovie">
                        <DataAnnotationsValidator />
                        
                        @if (!string.IsNullOrEmpty(uploadMessage))
                        {
                            <div class="alert alert-info mb-6">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                                <span>@uploadMessage</span>
                            </div>
                        }

                        <ValidationSummary class="alert alert-error mb-6" role="alert"/>

                        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">
                            <!-- Left Column - Form Fields -->
                            <div class="lg:col-span-2 space-y-6">
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <!-- Movie Name -->
                                    <div class="form-control">
                                        <label class="label">
                                            <span class="label-text font-semibold">
                                                Movie Name <span class="text-error">*</span>
                                            </span>
                                        </label>
                                        <InputText @bind-Value="Movie.Name" class="input input-bordered w-full" placeholder="Enter movie name" />
                                        <ValidationMessage For="() => Movie.Name" class="label-text-alt text-error mt-1" />
                                    </div>

                                    <!-- Director -->
                                    <div class="form-control">
                                        <label class="label">
                                            <span class="label-text font-semibold">
                                                Director <span class="text-error">*</span>
                                            </span>
                                        </label>
                                        <InputText @bind-Value="Movie.Director" class="input input-bordered w-full" placeholder="Enter director name" />
                                        <ValidationMessage For="() => Movie.Director" class="label-text-alt text-error mt-1" />
                                    </div>

                                    <!-- Release Date -->
                                    <div class="form-control">
                                        <label class="label">
                                            <span class="label-text font-semibold">Release Date</span>
                                        </label>
                                        <InputDate @bind-Value="Movie.ReleaseDate" class="input input-bordered w-full" />
                                        <ValidationMessage For="() => Movie.ReleaseDate" class="label-text-alt text-error mt-1" />
                                    </div>

                                    <!-- Contact Email -->
                                    <div class="form-control">
                                        <label class="label">
                                            <span class="label-text font-semibold">Contact Email</span>
                                        </label>
                                        <InputText @bind-Value="Movie.ContactEmail" class="input input-bordered w-full" placeholder="contact@example.com" type="email" />
                                        <ValidationMessage For="() => Movie.ContactEmail" class="label-text-alt text-error mt-1" />
                                    </div>

                                    <!-- Language -->
                                    <div class="form-control">
                                        <label class="label">
                                            <span class="label-text font-semibold">
                                                Language <span class="text-error">*</span>
                                            </span>
                                        </label>
                                        <select @bind="Movie.Language" class="select select-bordered w-full">
                                            @foreach (var language in Enum.GetValues<Language>())
                                            {
                                                <option value="@language">@language</option>
                                            }
                                        </select>
                                        <ValidationMessage For="() => Movie.Language" class="label-text-alt text-error mt-1" />
                                    </div>

                                    <!-- Category -->
                                    <div class="form-control">
                                        <label class="label">
                                            <span class="label-text font-semibold">
                                                Category <span class="text-error">*</span>
                                            </span>
                                        </label>
                                        <InputSelect @bind-Value="Movie.CategoryId" class="select select-bordered w-full">
                                            <option value="">-- Select Category --</option>
                                            @foreach (var category in Categories)
                                            {
                                                <option value="@category.Id">@category.Name</option>
                                            }
                                        </InputSelect>
                                        <ValidationMessage For="() => Movie.CategoryId" class="label-text-alt text-error mt-1" />
                                    </div>
                                </div>
                            </div>

                            <!-- Right Column - Poster -->
                            <div class="lg:col-span-1">
                                <div class="card bg-base-200">
                                    <div class="card-body">
                                        <h3 class="card-title text-lg mb-4">Movie Poster</h3>
                                        
                                        <!-- Current Poster -->
                                        @if (!string.IsNullOrEmpty(Movie.PosterPath))
                                        {
                                            <figure class="mb-4">
                                                <img src="@Movie.PosterPath" alt="Current poster" 
                                                     class="w-full max-w-48 mx-auto rounded-lg shadow-lg object-cover" style="height: 300px;" />
                                                <figcaption class="text-center text-sm text-base-content/60 mt-2">Current poster</figcaption>
                                            </figure>
                                        }
                                        else
                                        {
                                            <div class="flex items-center justify-center w-full h-72 bg-base-300 rounded-lg mb-4">
                                                <div class="text-center">
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 mx-auto text-base-content/40 mb-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                                    </svg>
                                                    <span class="text-base-content/60">No poster available</span>
                                                </div>
                                            </div>
                                        }

                                        <!-- Upload New Poster -->
                                        <div class="form-control">
                                            <label class="label">
                                                <span class="label-text font-semibold">Update Poster</span>
                                            </label>
                                            <InputFile OnChange="HandleFileUpload" class="file-input file-input-bordered file-input-sm w-full" accept="image/*" />
                                            <label class="label">
                                                <span class="label-text-alt text-base-content/60">Leave empty to keep current poster</span>
                                            </label>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Form Actions -->
                        <div class="divider my-8"></div>
                        <div class="flex flex-col sm:flex-row gap-4 justify-end">
                            <a href="/movies" class="btn btn-outline">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                                Cancel
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                </svg>
                                Save Changes
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    private Movie? Movie { get; set; }
    
    private List<Category> Categories { get; set; } = new();
    private string uploadMessage = string.Empty;
    private const long MaxFileSize = 5 * 1024 * 1024; // 5MB

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Movie ??= await context.Movie.FirstOrDefaultAsync(m => m.Id == Id);
        Categories = await context.Category.ToListAsync();

        if (Movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        uploadMessage = string.Empty;
        
        var file = e.File;
        if (file != null)
        {
            // Validate file size
            if (file.Size > MaxFileSize)
            {
                uploadMessage = "File size must be less than 5MB.";
                return;
            }

            // Validate file type
            var allowedTypes = new[] { "image/jpeg", "image/jpg", "image/png", "image/gif", "image/webp" };
            if (!allowedTypes.Contains(file.ContentType))
            {
                uploadMessage = "Only image files (JPEG, PNG, GIF, WebP) are allowed.";
                return;
            }

            try
            {
                // Create uploads directory if it doesn't exist
                var uploadsPath = Path.Combine(Environment.WebRootPath, "uploads", "movies");
                Directory.CreateDirectory(uploadsPath);

                // Generate unique filename
                var fileExtension = Path.GetExtension(file.Name);
                var fileName = $"{Guid.NewGuid()}{fileExtension}";
                var filePath = Path.Combine(uploadsPath, fileName);

                // Save file
                using var stream = new FileStream(filePath, FileMode.Create);
                await file.OpenReadStream(MaxFileSize).CopyToAsync(stream);

                // Delete old file if it exists
                if (!string.IsNullOrEmpty(Movie!.PosterPath))
                {
                    var oldFilePath = Path.Combine(Environment.WebRootPath, Movie.PosterPath.TrimStart('/'));
                    if (File.Exists(oldFilePath))
                    {
                        File.Delete(oldFilePath);
                    }
                }

                // Store relative path in movie object
                Movie!.PosterPath = $"/uploads/movies/{fileName}";
                uploadMessage = "File uploaded successfully!";
            }
            catch (Exception ex)
            {
                uploadMessage = $"Error uploading file: {ex.Message}";
            }
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateMovie()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Movie!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MovieExists(Movie!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/movies");
    }

    private bool MovieExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Movie.Any(e => e.Id == id);
    }
}
