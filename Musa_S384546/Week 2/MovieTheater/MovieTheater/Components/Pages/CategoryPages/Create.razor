@page "/categories/create"
@using Microsoft.EntityFrameworkCore
@using MovieTheater.Models
@inject IDbContextFactory<DataContext> DbFactory
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Create Category - MovieTheater</PageTitle>

<!-- Page Header -->
<div class="container mx-auto px-4 py-8">
    <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4 mb-8">
        <div>
            <h1 class="text-4xl font-bold text-base-content">Create Category</h1>
            <p class="text-base-content/70 mt-2">Add a new movie category or genre</p>
        </div>
        <a href="/categories" class="btn btn-outline">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Back to Categories
        </a>
    </div>

    <!-- Form Card -->
    <div class="max-w-2xl mx-auto">
        <div class="card bg-base-100 shadow-xl">
            <div class="card-body">
                <EditForm Model="Category" OnValidSubmit="AddCategory">
                    <DataAnnotationsValidator />
                    
                    <ValidationSummary class="alert alert-error mb-6" role="alert"/>

                    <div class="space-y-6">
                        <!-- Category Name -->
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-semibold">
                                    Category Name <span class="text-error">*</span>
                                </span>
                            </label>
                            <InputText @bind-Value="Category.Name" class="input input-bordered w-full" placeholder="e.g., Action, Comedy, Drama" />
                            <ValidationMessage For="() => Category.Name" class="label-text-alt text-error mt-1" />
                            <label class="label">
                                <span class="label-text-alt text-base-content/60">Enter a descriptive name for the category</span>
                            </label>
                        </div>

                        <!-- Category Code -->
                        <div class="form-control">
                            <label class="label">
                                <span class="label-text font-semibold">
                                    Category Code <span class="text-error">*</span>
                                </span>
                            </label>
                            <InputText @bind-Value="Category.Code" class="input input-bordered w-full" placeholder="e.g., ACT, COM, DRA" />
                            <ValidationMessage For="() => Category.Code" class="label-text-alt text-error mt-1" />
                            <label class="label">
                                <span class="label-text-alt text-base-content/60">Short code for identification (2-5 characters recommended)</span>
                            </label>
                        </div>

                        <!-- Preview -->
                        @if (!string.IsNullOrEmpty(Category.Name) || !string.IsNullOrEmpty(Category.Code))
                        {
                            <div class="card bg-base-200">
                                <div class="card-body">
                                    <h3 class="card-title text-lg mb-4">Preview</h3>
                                    <div class="flex items-center gap-3">
                                        <div class="avatar placeholder">
                                            <div class="bg-primary text-primary-content rounded-full w-10 h-10">
                                                <span class="text-sm font-bold">
                                                    @(string.IsNullOrEmpty(Category.Code) ? "?" : Category.Code.Substring(0, Math.Min(2, Category.Code.Length)).ToUpper())
                                                </span>
                                            </div>
                                        </div>
                                        <div>
                                            <div class="font-semibold">@(string.IsNullOrEmpty(Category.Name) ? "Category Name" : Category.Name)</div>
                                            <div class="text-sm text-base-content/60">0 movies</div>
                                        </div>
                                        <span class="badge badge-outline ml-auto">
                                            @(string.IsNullOrEmpty(Category.Code) ? "CODE" : Category.Code.ToUpper())
                                        </span>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <!-- Form Actions -->
                    <div class="divider my-8"></div>
                    <div class="flex flex-col sm:flex-row gap-4 justify-end">
                        <a href="/categories" class="btn btn-outline">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                            </svg>
                            Cancel
                        </a>
                        <button type="submit" class="btn btn-primary">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                            </svg>
                            Create Category
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    private Category Category { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddCategory()
    {
        using var context = DbFactory.CreateDbContext();
        context.Category.Add(Category);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/categories");
    }
}
