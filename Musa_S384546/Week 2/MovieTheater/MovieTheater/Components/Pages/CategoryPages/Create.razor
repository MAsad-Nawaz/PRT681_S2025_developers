@page "/categories/create"
@using Microsoft.EntityFrameworkCore
@using MovieTheater.Models
@inject IDbContextFactory<DataContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Category</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Category" OnValidSubmit="AddCategory" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <span class="text-danger">*</span>
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Category.Name" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => Category.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="code" class="form-label">Code:</label> 
                <InputText id="code" @bind-Value="Category.Code" class="form-control" /> 
                <ValidationMessage For="() => Category.Code" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/categories">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Category Category { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddCategory()
    {
        using var context = DbFactory.CreateDbContext();
        context.Category.Add(Category);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/categories");
    }
}